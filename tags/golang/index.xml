<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Home on Rails</title>
    <link>https://www.homeonrails.com/tags/golang/</link>
    <description>Recent content in golang on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sat, 03 Mar 2018 13:47:11 +0400</lastBuildDate>
    <atom:link href="https://www.homeonrails.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Choosing a type for blockchain height (beware of unsigned integers)</title>
      <link>https://www.homeonrails.com/2018/03/choosing-a-type-for-blockchain-height/</link>
      <pubDate>Sat, 03 Mar 2018 13:47:11 +0400</pubDate>
      <guid>https://www.homeonrails.com/2018/03/choosing-a-type-for-blockchain-height/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://medium.com/@anton.kalyaev/choosing-a-type-for-blockchain-height-beware-of-unsigned-integers-714804dddf1d&#34;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before &lt;a href=&#34;https://github.com/tendermint/tendermint/pull/914&#34;&gt;this pull request&lt;/a&gt;,
it was a mess. ABCI was using a &lt;code&gt;uint64&lt;/code&gt; height on EndBlock. Tendermint Core
was using the same type for TxResult. Block and BlockStore, however, were using
&lt;code&gt;int&lt;/code&gt; heights (remember that &lt;code&gt;int&lt;/code&gt; is different depending on the processor
architecture: &lt;code&gt;int32&lt;/code&gt; for x86, &lt;code&gt;int64&lt;/code&gt; for amd64). There was no single standard
across our repositories as for what type to use for blockchain height.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging the Memory Leak in Tendermint</title>
      <link>https://www.homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</link>
      <pubDate>Sat, 03 Mar 2018 13:20:11 +0400</pubDate>
      <guid>https://www.homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://blog.cosmos.network/debugging-the-memory-leak-in-tendermint-210186711420&#34;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I have spent the last week looking for clues and writing test cases in order to
find and fix the memory leak in
&lt;a href=&#34;https://github.com/tendermint/tendermint/&#34;&gt;Tendermint&lt;/a&gt;. For those of you who
don’t know, Tendermint Core is a Byzantine Fault Tolerant (BFT) middleware that
takes a state transition machine — written in any programming language — and
securely replicates it on many machines. It is also the foundation of
&lt;a href=&#34;https://cosmos.network/&#34;&gt;Cosmos&lt;/a&gt; — our solution for scaling blockchains.&lt;/p&gt;
&lt;p&gt;Finding a memory leak in Go is not an easy task. However, there is a common set
of questions, answers to which will hopefully help you identify the source of a
leak. Here is the list:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstracting the logger interface in Go</title>
      <link>https://www.homeonrails.com/2017/06/abstracting-the-logger-interface-in-go/</link>
      <pubDate>Tue, 06 Jun 2017 22:35:01 +0200</pubDate>
      <guid>https://www.homeonrails.com/2017/06/abstracting-the-logger-interface-in-go/</guid>
      <description>Wrote a blog post a few days ago for my company&amp;rsquo;s blog about our experience of moving from a static logger to an interface and adapter for the go-kit log package.
https://blog.cosmos.network/abstracting-the-logger-interface-in-go-4cf96bf90bb7</description>
    </item>
    <item>
      <title>CircleCI config for multipackage Golang projects</title>
      <link>https://www.homeonrails.com/2017/02/circleci-config-for-multipackage-golang-projects/</link>
      <pubDate>Mon, 06 Feb 2017 10:54:24 +0400</pubDate>
      <guid>https://www.homeonrails.com/2017/02/circleci-config-for-multipackage-golang-projects/</guid>
      <description>&lt;p&gt;Multipackage Golang project - project, consisting of several packages. When
testing you usually do something like &lt;code&gt;go test ./...&lt;/code&gt;, when getting all the
dependencies - &lt;code&gt;go get ./...&lt;/code&gt;. There may be or may not be a Go package at the
root level. Examples: &lt;a href=&#34;https://github.com/hashicorp/consul&#34;&gt;1&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tendermint/tendermint&#34;&gt;2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
